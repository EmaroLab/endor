<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>AND-OR Graph Library: GraphSearch Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">AND-OR Graph Library
   &#160;<span id="projectnumber">1.0</span>
   </div>
   <div id="projectbrief">C++ library to create and navigate AND-OR graphs</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="../../dc/d35/classGraphSearch-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">GraphSearch Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>class "GraphSearch" navigates the graph to find the optimal path from the head to the leaves  
 <a href="../../d9/d4e/classGraphSearch.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../db/d92/graphsearch_8h_source.xhtml">graphsearch.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Collaboration diagram for GraphSearch:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d7/d7d/classGraphSearch__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a72133dd676df0b43bcd11ee8420f5b32"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a72133dd676df0b43bcd11ee8420f5b32"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d4e/classGraphSearch.xhtml#a72133dd676df0b43bcd11ee8420f5b32">GraphSearch</a> (<a class="el" href="../../db/dbf/classAOgraph.xhtml">AOgraph</a> *gr)</td></tr>
<tr class="memdesc:a72133dd676df0b43bcd11ee8420f5b32"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor <br /></td></tr>
<tr class="separator:a72133dd676df0b43bcd11ee8420f5b32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5a1ea3247cac256760d3bb6abc55c2c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af5a1ea3247cac256760d3bb6abc55c2c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d4e/classGraphSearch.xhtml#af5a1ea3247cac256760d3bb6abc55c2c">printSearchInfo</a> ()</td></tr>
<tr class="memdesc:af5a1ea3247cac256760d3bb6abc55c2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">display the information of all the paths <br /></td></tr>
<tr class="separator:af5a1ea3247cac256760d3bb6abc55c2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af165f2a0ad44af0d1478232f257cfbb9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../db/dc7/classPath.xhtml">Path</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d4e/classGraphSearch.xhtml#af165f2a0ad44af0d1478232f257cfbb9">navigateGraph</a> ()</td></tr>
<tr class="memdesc:af165f2a0ad44af0d1478232f257cfbb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">navigate graph  <a href="#af165f2a0ad44af0d1478232f257cfbb9">More...</a><br /></td></tr>
<tr class="separator:af165f2a0ad44af0d1478232f257cfbb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acacbf1a051913699f67e7d56ca23fb18"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acacbf1a051913699f67e7d56ca23fb18"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d4e/classGraphSearch.xhtml#acacbf1a051913699f67e7d56ca23fb18">~GraphSearch</a> ()</td></tr>
<tr class="memdesc:acacbf1a051913699f67e7d56ca23fb18"><td class="mdescLeft">&#160;</td><td class="mdescRight">destructor <br /></td></tr>
<tr class="separator:acacbf1a051913699f67e7d56ca23fb18"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a10523548e0b03a3c9584ada8b0b648f2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a10523548e0b03a3c9584ada8b0b648f2"></a>
<a class="el" href="../../db/dbf/classAOgraph.xhtml">AOgraph</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d4e/classGraphSearch.xhtml#a10523548e0b03a3c9584ada8b0b648f2">graph</a></td></tr>
<tr class="memdesc:a10523548e0b03a3c9584ada8b0b648f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">graph under analysis <br /></td></tr>
<tr class="separator:a10523548e0b03a3c9584ada8b0b648f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a563b21de4add5dc31d4c48db6b01dba2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a563b21de4add5dc31d4c48db6b01dba2"></a>
<a class="el" href="../../d6/d22/classAOnode.xhtml">AOnode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d4e/classGraphSearch.xhtml#a563b21de4add5dc31d4c48db6b01dba2">currentNode</a></td></tr>
<tr class="memdesc:a563b21de4add5dc31d4c48db6b01dba2"><td class="mdescLeft">&#160;</td><td class="mdescRight">node under evaluation <br /></td></tr>
<tr class="separator:a563b21de4add5dc31d4c48db6b01dba2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9eb01a3c8970b073f6541471a47d222c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9eb01a3c8970b073f6541471a47d222c"></a>
vector&lt; <a class="el" href="../../db/dc7/classPath.xhtml">Path</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a></td></tr>
<tr class="memdesc:a9eb01a3c8970b073f6541471a47d222c"><td class="mdescLeft">&#160;</td><td class="mdescRight">set of the paths found during the search (already evaluated &amp; not) <br /></td></tr>
<tr class="separator:a9eb01a3c8970b073f6541471a47d222c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a157b86d34f9e7a7ce9028bd85513ac69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../db/dc7/classPath.xhtml">Path</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d4e/classGraphSearch.xhtml#a157b86d34f9e7a7ce9028bd85513ac69">findOptimalPath</a> ()</td></tr>
<tr class="memdesc:a157b86d34f9e7a7ce9028bd85513ac69"><td class="mdescLeft">&#160;</td><td class="mdescRight">find the path with minimum cost (among available ones)  <a href="#a157b86d34f9e7a7ce9028bd85513ac69">More...</a><br /></td></tr>
<tr class="separator:a157b86d34f9e7a7ce9028bd85513ac69"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="../../db/d92/graphsearch_8h_source.xhtml#l00054">54</a> of file <a class="el" href="../../db/d92/graphsearch_8h_source.xhtml">graphsearch.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a157b86d34f9e7a7ce9028bd85513ac69"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../db/dc7/classPath.xhtml">Path</a> * GraphSearch::findOptimalPath </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>find the path with minimum cost (among available ones) </p><dl class="section return"><dt>Returns</dt><dd>pointer to the path with minimum cost </dd></dl>

<p>Definition at line <a class="el" href="../../d5/d70/graphsearch_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="../../d5/d70/graphsearch_8cpp_source.xhtml">graphsearch.cpp</a>.</p>

<p>References <a class="el" href="../../db/d92/graphsearch_8h_source.xhtml#l00020">Path::pathCost</a>, <a class="el" href="../../d5/d70/graphsearch_8cpp_source.xhtml#l00013">Path::printPathInfo()</a>, and <a class="el" href="../../db/d92/graphsearch_8h_source.xhtml#l00021">Path::tested</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="comment">// issue a warning if there are no paths to check</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span> ((<span class="keywordtype">int</span>)<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>.size() == 0)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;[ERROR] There are no available paths. Did you run navigateGraph()?&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> NULL;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="comment">// issue a warning if the first path has not been tested</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>[0].tested == <span class="keyword">false</span>)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;[ERROR] There are still paths to be tested. Cannot retrieve the optimal one yet.&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">return</span> NULL;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    </div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml">Path</a>* optimal = &amp;<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>[0];</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordtype">int</span> minCost = <a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>[0].pathCost;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordtype">int</span> optimalIndex = 0;    </div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=1; i&lt;(int)<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>.size(); i++)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="comment">// issue a warning if there is a path which has not been tested</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>[i].tested == <span class="keyword">false</span>)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            cout&lt;&lt;<span class="stringliteral">&quot;[ERROR] There are paths still to be tested. Cannot retrieve the optimal one yet.&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">return</span> NULL;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>[i].pathCost &lt; minCost)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            optimal = &amp;<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>[i];</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            optimalIndex = i;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    cout&lt;&lt;endl &lt;&lt;<span class="stringliteral">&quot;Optimal path found.&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    optimal-&gt;<a class="code" href="../../db/dc7/classPath.xhtml#abac10644f4eca401a05a8415659ed314">printPathInfo</a>(optimalIndex);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> optimal;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="ttc" id="classPath_xhtml_abac10644f4eca401a05a8415659ed314"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#abac10644f4eca401a05a8415659ed314">Path::printPathInfo</a></div><div class="ttdeci">void printPathInfo(int index)</div><div class="ttdoc">display path information </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d70/graphsearch_8cpp_source.xhtml#l00013">graphsearch.cpp:13</a></div></div>
<div class="ttc" id="classPath_xhtml"><div class="ttname"><a href="../../db/dc7/classPath.xhtml">Path</a></div><div class="ttdoc">class &quot;Path&quot; representing a unique path traversing the graph from the head node to the leaves (a &quot;lea...</div><div class="ttdef"><b>Definition:</b> <a href="../../db/d92/graphsearch_8h_source.xhtml#l00017">graphsearch.h:17</a></div></div>
<div class="ttc" id="classGraphSearch_xhtml_a9eb01a3c8970b073f6541471a47d222c"><div class="ttname"><a href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">GraphSearch::allPaths</a></div><div class="ttdeci">vector&lt; Path &gt; allPaths</div><div class="ttdoc">set of the paths found during the search (already evaluated &amp; not) </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d92/graphsearch_8h_source.xhtml#l00063">graphsearch.h:63</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af165f2a0ad44af0d1478232f257cfbb9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../db/dc7/classPath.xhtml">Path</a> * GraphSearch::navigateGraph </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>navigate graph </p><dl class="section return"><dt>Returns</dt><dd>pointer to the path with minimum cost </dd></dl>

<p>Definition at line <a class="el" href="../../d5/d70/graphsearch_8cpp_source.xhtml#l00076">76</a> of file <a class="el" href="../../d5/d70/graphsearch_8cpp_source.xhtml">graphsearch.cpp</a>.</p>

<p>References <a class="el" href="../../db/d92/graphsearch_8h_source.xhtml#l00027">Path::Path()</a>, <a class="el" href="../../db/d92/graphsearch_8h_source.xhtml#l00021">Path::tested</a>, and <a class="el" href="../../db/d92/graphsearch_8h_source.xhtml#l00022">Path::visited</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a563b21de4add5dc31d4c48db6b01dba2">currentNode</a> = <a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a10523548e0b03a3c9584ada8b0b648f2">graph</a>-&gt;<a class="code" href="../../db/dbf/classAOgraph.xhtml#a3b49c18c37014abdad084e1939fe2486">head</a>;                      <span class="comment">// set the head as the initial node</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    vector&lt;Path&gt;::iterator it = <a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>.begin();   <span class="comment">// set the iterator across paths to point to the first one</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml">Path</a>* best = NULL;                              <span class="comment">// set the pointer to the optimal path to NULL</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    </div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// check if the head is solved</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a563b21de4add5dc31d4c48db6b01dba2">currentNode</a>-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a352d9bf8378ea47777551a6aff211caf">getSolved</a>() == <span class="keyword">true</span>)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;[REPORT] The graph is solved. No need to find an optimal path.&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">return</span> best;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    </div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// create a new path</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml">Path</a>* openPath = <span class="keyword">new</span> <a class="code" href="../../db/dc7/classPath.xhtml">Path</a>(<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a563b21de4add5dc31d4c48db6b01dba2">currentNode</a>-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a5c0cc92fac735168be8111fae12af690">nCost</a>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// add the current node to set of visited nodes of the path</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    openPath-&gt;<a class="code" href="../../db/dc7/classPath.xhtml#a0a7d35951ac3263906a310421f7a0503">visited</a>.push_back(<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a563b21de4add5dc31d4c48db6b01dba2">currentNode</a>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// add the path to the toTest set</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>.push_back(*openPath);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    *it-&gt;printPathInfo(distance(<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">allPaths</a>.begin(), it));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        </div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">//check if the head is feasible (no need to expand its hyperlinks)</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a563b21de4add5dc31d4c48db6b01dba2">currentNode</a>-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#acc99bbb58b534e4625b6c52de08be046">getFeasible</a>() == <span class="keyword">true</span>)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="comment">// set the path as tested</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        openPath-&gt;<a class="code" href="../../db/dc7/classPath.xhtml#ab2935998053342b9ae3062a6a54ceeff">tested</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        best = <a class="code" href="../../d9/d4e/classGraphSearch.xhtml#a157b86d34f9e7a7ce9028bd85513ac69">findOptimalPath</a>();</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">return</span> best;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    </div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">    </span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">    // for each of the head node hyperarcs BUT the last hyperarc</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">    int numHyperArcs = currentNode-&gt;arcs.size();</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">    Path* newPath = NULL;</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">    HyperArc* openArc = NULL;</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">    for (int i=0; i&lt;numHyperArcs-1; i++)</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">    {</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">        // create a new path, by copying the current one</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">        Path* toBeCopied = findByIndex(PathIndex-1);</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">        newPath = new Path(PathIndex, *toBeCopied);</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">        // add the child nodes to the new_path.nodes_toVisit</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">        openArc = &amp;(currentNode-&gt;arcs[i]);</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">        for (int j=0; j&lt; (int)openArc-&gt;children.size(); j++)</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">            newPath-&gt;toVisit.push_back(openArc-&gt;children[j]);</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">        // add the new path to the toTest set</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">        allPaths.push_back(*newPath);</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">        PathIndex++;</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">        //DEBUG:newPath-&gt;printPathInfo();  </span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">    }</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">    // add the child nodes of the last hyperarc to the current path</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">    openArc = &amp;(currentNode-&gt;arcs[numHyperArcs]);</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">    openPath = findByIndex(1);      //!\todo fix this so that I don&#39;t have to specify the index explicitly</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">    for (int j=0; j&lt; (int)openArc-&gt;children.size(); j++)</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">        openPath-&gt;toVisit.push_back(openArc-&gt;children[j]);</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">    printSearchInfo();</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">*/</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">//********************************************************</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">// while (there are paths toTest)</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// while /there are nodes toVisit in the current path)</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="comment">// currentNode = oneNode in path.nodes_toVisit</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="comment">// path.cost = path_cost + currentNode.cost;</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="comment">// - is currentNode feasible?</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="comment">// YES:</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="comment">// - move the node to the visited ones</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="comment">// - if (there are no other nodes to visit in this path)</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    <span class="comment">// - move the path to the tested ones</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    <span class="comment">// - repeat from line 50</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="comment">// NO:</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="comment">// - consider the first hyperarc: add the child nodes to path.nodes_toVisit</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="comment">// - for (each of the other hyperarcs)</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    <span class="comment">// add a path to the toTest, by copying the current one</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="comment">// add the child nodes to new_path.nodes_toVisit</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="comment">// - repeat from line 50</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">//********************************************************</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> best;          </div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="ttc" id="classAOnode_xhtml_a352d9bf8378ea47777551a6aff211caf"><div class="ttname"><a href="../../d6/d22/classAOnode.xhtml#a352d9bf8378ea47777551a6aff211caf">AOnode::getSolved</a></div><div class="ttdeci">bool getSolved()</div><div class="ttdoc">get the &quot;solved&quot; status of the node </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/dc8/aonode_8cpp_source.xhtml#l00119">aonode.cpp:119</a></div></div>
<div class="ttc" id="classGraphSearch_xhtml_a563b21de4add5dc31d4c48db6b01dba2"><div class="ttname"><a href="../../d9/d4e/classGraphSearch.xhtml#a563b21de4add5dc31d4c48db6b01dba2">GraphSearch::currentNode</a></div><div class="ttdeci">AOnode * currentNode</div><div class="ttdoc">node under evaluation </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d92/graphsearch_8h_source.xhtml#l00062">graphsearch.h:62</a></div></div>
<div class="ttc" id="classGraphSearch_xhtml_a10523548e0b03a3c9584ada8b0b648f2"><div class="ttname"><a href="../../d9/d4e/classGraphSearch.xhtml#a10523548e0b03a3c9584ada8b0b648f2">GraphSearch::graph</a></div><div class="ttdeci">AOgraph * graph</div><div class="ttdoc">graph under analysis </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d92/graphsearch_8h_source.xhtml#l00061">graphsearch.h:61</a></div></div>
<div class="ttc" id="classPath_xhtml"><div class="ttname"><a href="../../db/dc7/classPath.xhtml">Path</a></div><div class="ttdoc">class &quot;Path&quot; representing a unique path traversing the graph from the head node to the leaves (a &quot;lea...</div><div class="ttdef"><b>Definition:</b> <a href="../../db/d92/graphsearch_8h_source.xhtml#l00017">graphsearch.h:17</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_a3b49c18c37014abdad084e1939fe2486"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#a3b49c18c37014abdad084e1939fe2486">AOgraph::head</a></div><div class="ttdeci">AOnode * head</div><div class="ttdoc">pointer to the node = final assembly </div><div class="ttdef"><b>Definition:</b> <a href="../../de/df2/aograph_8h_source.xhtml#l00036">aograph.h:36</a></div></div>
<div class="ttc" id="classPath_xhtml_a0a7d35951ac3263906a310421f7a0503"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#a0a7d35951ac3263906a310421f7a0503">Path::visited</a></div><div class="ttdeci">vector&lt; AOnode * &gt; visited</div><div class="ttdoc">set of the nodes in the path, as already accessed from the head </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d92/graphsearch_8h_source.xhtml#l00022">graphsearch.h:22</a></div></div>
<div class="ttc" id="classGraphSearch_xhtml_a157b86d34f9e7a7ce9028bd85513ac69"><div class="ttname"><a href="../../d9/d4e/classGraphSearch.xhtml#a157b86d34f9e7a7ce9028bd85513ac69">GraphSearch::findOptimalPath</a></div><div class="ttdeci">Path * findOptimalPath()</div><div class="ttdoc">find the path with minimum cost (among available ones) </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d70/graphsearch_8cpp_source.xhtml#l00030">graphsearch.cpp:30</a></div></div>
<div class="ttc" id="classAOnode_xhtml_a5c0cc92fac735168be8111fae12af690"><div class="ttname"><a href="../../d6/d22/classAOnode.xhtml#a5c0cc92fac735168be8111fae12af690">AOnode::nCost</a></div><div class="ttdeci">int nCost</div><div class="ttdoc">generic node cost </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/d3a/aonode_8h_source.xhtml#l00049">aonode.h:49</a></div></div>
<div class="ttc" id="classGraphSearch_xhtml_a9eb01a3c8970b073f6541471a47d222c"><div class="ttname"><a href="../../d9/d4e/classGraphSearch.xhtml#a9eb01a3c8970b073f6541471a47d222c">GraphSearch::allPaths</a></div><div class="ttdeci">vector&lt; Path &gt; allPaths</div><div class="ttdoc">set of the paths found during the search (already evaluated &amp; not) </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d92/graphsearch_8h_source.xhtml#l00063">graphsearch.h:63</a></div></div>
<div class="ttc" id="classPath_xhtml_ab2935998053342b9ae3062a6a54ceeff"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#ab2935998053342b9ae3062a6a54ceeff">Path::tested</a></div><div class="ttdeci">bool tested</div><div class="ttdoc">flag: a path is tested if all its nodes have been visited </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d92/graphsearch_8h_source.xhtml#l00021">graphsearch.h:21</a></div></div>
<div class="ttc" id="classAOnode_xhtml_acc99bbb58b534e4625b6c52de08be046"><div class="ttname"><a href="../../d6/d22/classAOnode.xhtml#acc99bbb58b534e4625b6c52de08be046">AOnode::getFeasible</a></div><div class="ttdeci">bool getFeasible()</div><div class="ttdoc">get the &quot;feasible&quot; status of the node </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/dc8/aonode_8cpp_source.xhtml#l00126">aonode.cpp:126</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="../../db/d92/graphsearch_8h_source.xhtml">graphsearch.h</a></li>
<li><a class="el" href="../../d5/d70/graphsearch_8cpp_source.xhtml">graphsearch.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Apr 21 2016 10:41:21 for AND-OR Graph Library by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
