<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>endor: aograph.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../endor.jpg"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">endor
   &#160;<span id="projectnumber">1.0</span>
   </div>
   <div id="projectbrief">C++ library to create and navigate AND-OR graphs</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">aograph.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//===============================================================================//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Name         : aograph.cpp</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// Author(s)    : Barbara Bruno, Yeshasvi Tirupachuri V.S.</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Affiliation  : University of Genova, Italy - dept. DIBRIS</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// Version      : 1.0</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// Description  : AND-OR graph</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//===============================================================================//</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;aograph.h&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="../../db/dc7/classPath.xhtml#afbe6763440ffa3fd8a3d7edda1a5b1f3">   14</a></span>&#160;<a class="code" href="../../db/dc7/classPath.xhtml#afbe6763440ffa3fd8a3d7edda1a5b1f3">Path::Path</a>(<span class="keywordtype">int</span> cost, <span class="keywordtype">int</span> index)</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#affd535b90eec827989d84bb8f9dbc477">pIndex</a> = index;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">pCost</a> = cost;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#a536e01bc729559a9a53eb9c47ec2e684">pComplete</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;}</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="../../db/dc7/classPath.xhtml#a50403c22dbf5d0a63f8f2d637068b1b3">   24</a></span>&#160;<a class="code" href="../../db/dc7/classPath.xhtml#afbe6763440ffa3fd8a3d7edda1a5b1f3">Path::Path</a>(<span class="keyword">const</span> <a class="code" href="../../db/dc7/classPath.xhtml">Path</a> &amp;toBeCopied, <span class="keywordtype">int</span> index)</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#affd535b90eec827989d84bb8f9dbc477">pIndex</a> = index;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">pCost</a> = toBeCopied.<a class="code" href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">pCost</a>;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#a536e01bc729559a9a53eb9c47ec2e684">pComplete</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a> = toBeCopied.<a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a>;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a> = toBeCopied.<a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="../../db/dc7/classPath.xhtml#a885c9820459010ec106031910947bd80">   34</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dc7/classPath.xhtml#a885c9820459010ec106031910947bd80">Path::printPathInfo</a>()</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;Info of path: &quot;</span> &lt;&lt;<a class="code" href="../../db/dc7/classPath.xhtml#affd535b90eec827989d84bb8f9dbc477">pIndex</a> &lt;&lt;endl;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">//DEBUG: cout&lt;&lt;&quot;Is complete? &quot; &lt;&lt;boolalpha &lt;&lt;pComplete &lt;&lt;endl;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;Total cost: &quot;</span> &lt;&lt;<a class="code" href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">pCost</a> &lt;&lt;endl;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;Nodes in path:&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt; (int)<a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a>.size(); i++)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        cout&lt;&lt;<a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a>[i]-&gt;nName &lt;&lt;<span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="comment">//DEBUG: cout&lt;&lt;&quot;checked? &quot; &lt;&lt;boolalpha &lt;&lt;checkedNodes[i];</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>[i] == <span class="keyword">true</span>)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            cout&lt;&lt;<span class="stringliteral">&quot;- done&quot;</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        cout&lt;&lt;endl;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    cout&lt;&lt;endl;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="../../db/dc7/classPath.xhtml#a7f68b656205f2fb7a375509c81a8d571">   53</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dc7/classPath.xhtml#a7f68b656205f2fb7a375509c81a8d571">Path::addNode</a>(<a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a>* node)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a>.push_back(node);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>.push_back(<span class="keyword">false</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">pCost</a> = <a class="code" href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">pCost</a> + node-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a5c0cc92fac735168be8111fae12af690">nCost</a>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="../../db/dc7/classPath.xhtml#a8e9f65f8b87ece31c04381fd2d1bff73">   62</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dc7/classPath.xhtml#a8e9f65f8b87ece31c04381fd2d1bff73">Path::updatePath</a>(<span class="keywordtype">string</span> nameNode)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// check whether the node is in the path</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i &lt; (int)<a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a>.size(); i++)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="comment">// if a node is solved, its cost goes to 0</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a>[i]-&gt;nName == nameNode)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>[i] = <span class="keyword">true</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <a class="code" href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">pCost</a> = <a class="code" href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">pCost</a> - <a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a>[i]-&gt;nCost;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    </div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;Path: &quot;</span> &lt;&lt;<a class="code" href="../../db/dc7/classPath.xhtml#affd535b90eec827989d84bb8f9dbc477">pIndex</a> &lt;&lt;endl;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;Updated path cost: &quot;</span> &lt;&lt;<a class="code" href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">pCost</a> &lt;&lt;endl;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="../../db/dc7/classPath.xhtml#ac0e5a1573ee1096da427266c09dee678">   81</a></span>&#160;<a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a>* <a class="code" href="../../db/dc7/classPath.xhtml#ac0e5a1573ee1096da427266c09dee678">Path::suggestNode</a>()</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    </div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a>* selection = NULL;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    </div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// iterate on the nodes in the path, from the last to the first one</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = (<span class="keywordtype">int</span>)<a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a>.size()-1; i &gt; -1; i--)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment">// rationale for the suggestion:</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">// 1. move along the path from the leaves to the head</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="comment">// 2. choose the first feasible &amp; not-solved node</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>[i] == <span class="keyword">false</span>)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a>[i]-&gt;nFeasible == <span class="keyword">true</span>)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                selection = <a class="code" href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">pathNodes</a>[i];</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    </div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">// raise an error if the suggested node is NULL</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">if</span> (selection == NULL)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;[ERROR] No suggestion possible.&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    </div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> selection;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#a032ca4643c87641235d59506090a53d1">  113</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dbf/classAOgraph.xhtml#a032ca4643c87641235d59506090a53d1">AOgraph::addNode</a>(<span class="keywordtype">string</span> nameNode, <span class="keywordtype">int</span> cost)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// create the node</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a> toAdd(nameNode, cost);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    </div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// add it to the set of nodes in the graph</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    graph.push_back(toAdd);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#a8437faadc195ca2835e41c384777d061">  125</a></span>&#160;<a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a>* <a class="code" href="../../db/dbf/classAOgraph.xhtml#a8437faadc195ca2835e41c384777d061">AOgraph::findByName</a>(<span class="keywordtype">string</span> nameNode)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a>* temp = NULL;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    </div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt; (int)graph.size(); i++)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">if</span> (graph[i].nName == nameNode)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            temp = &amp;graph[i];</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    </div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// issue a warning if the node has not been found</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">if</span> (temp == NULL)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;[Warning] Name not found.&quot;</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            &lt;&lt;<span class="stringliteral">&quot;Did you really look for &quot;</span> &lt;&lt;nameNode &lt;&lt;<span class="stringliteral">&quot;?&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">return</span> temp;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#aa5be6664955f2ae86ffe5b560aaac379">  146</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dbf/classAOgraph.xhtml#aa5be6664955f2ae86ffe5b560aaac379">AOgraph::updateNodeFeasibility</a>()</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;{</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt; (int)graph.size(); i++)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        graph[i].isFeasible();        </div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#a08f3218c510dcb87bfb9c2341ebfe574">  153</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dbf/classAOgraph.xhtml#a08f3218c510dcb87bfb9c2341ebfe574">AOgraph::generatePaths</a>()</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// if the head node is NULL, there are no paths to generate</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">if</span> (head == NULL)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;[WARNING] There is no graph to navigate (head == NULL).&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    </div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// otherwise, create one empty path</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a>* currentNode = head;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="../../db/dc7/classPath.xhtml">Path</a>* newPath = <span class="keyword">new</span> <a class="code" href="../../db/dc7/classPath.xhtml#afbe6763440ffa3fd8a3d7edda1a5b1f3">Path</a>(0,0);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    newPath-&gt;<a class="code" href="../../db/dc7/classPath.xhtml#a7f68b656205f2fb7a375509c81a8d571">addNode</a>(currentNode);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    paths.push_back(*newPath);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    </div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// iterate through the paths until they&#39;re all complete</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">while</span>(1)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="comment">// find the first not-complete path</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordtype">bool</span> allComplete = <span class="keyword">true</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordtype">int</span> currentPathIndex;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt; (int)paths.size(); i++)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">if</span> (paths[i].<a class="code" href="../../db/dc7/classPath.xhtml#a536e01bc729559a9a53eb9c47ec2e684">pComplete</a> == <span class="keyword">false</span>)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                allComplete = <span class="keyword">false</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                currentPathIndex = i;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="comment">// if all paths are complete, the generation is done</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">if</span> (allComplete == <span class="keyword">true</span>)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            </div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="comment">// find the first not-checked node in the open path</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordtype">bool</span> allChecked = <span class="keyword">true</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordtype">int</span> currentNodeIndex;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt; (int)paths[currentPathIndex].<a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>.size(); i++)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">if</span> (paths[currentPathIndex].<a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>[i] == <span class="keyword">false</span>)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                allChecked = <span class="keyword">false</span>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                currentNode = paths[currentPathIndex].pathNodes[i];</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                currentNodeIndex = i;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="comment">// if all nodes are checked, the path is complete</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">if</span> (allChecked == <span class="keyword">true</span>)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            paths[currentPathIndex].pComplete = <span class="keyword">true</span>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="comment">// if the current node is terminal:</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="comment">// 1. check it</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">if</span> (currentNode-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">arcs</a>.size() == 0)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                paths[currentPathIndex].<a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>[currentNodeIndex] = <span class="keyword">true</span>;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            </div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="comment">// if the current node has only one hyperarc:</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="comment">// 1. check it</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="comment">// 2. add its child nodes to the path</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">if</span> (currentNode-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">arcs</a>.size() == 1)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                paths[currentPathIndex].checkedNodes[currentNodeIndex] = <span class="keyword">true</span>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt; (int)currentNode-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">arcs</a>[0].children.size(); i++)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    paths[currentPathIndex].<a class="code" href="../../db/dc7/classPath.xhtml#a7f68b656205f2fb7a375509c81a8d571">addNode</a>(currentNode-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">arcs</a>[0].children[i]);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            </div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="comment">// if the current node has more than one hyperarc:</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="comment">// 1. create (numArcs-1) copies of the current path</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="comment">// 2. check the current node in the copies</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="comment">// 3. add the child nodes of the last (numArcs-1) arcs to the copies</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="comment">// 4. check the current node in the current path</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <span class="comment">// 5. add the child nodes of the first arcs to the current path</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">if</span> (currentNode-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">arcs</a>.size() &gt; 1)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keywordtype">int</span> numCopies = currentNode-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">arcs</a>.size()-1;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;numCopies; i++)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    newPath = <span class="keyword">new</span> <a class="code" href="../../db/dc7/classPath.xhtml#afbe6763440ffa3fd8a3d7edda1a5b1f3">Path</a>(paths[currentPathIndex], paths.size());</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    newPath-&gt;<a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>[currentNodeIndex] = <span class="keyword">true</span>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt; (int)currentNode-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">arcs</a>[i+1].children.size(); j++)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        newPath-&gt;<a class="code" href="../../db/dc7/classPath.xhtml#a7f68b656205f2fb7a375509c81a8d571">addNode</a>(currentNode-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">arcs</a>[i+1].children[j]);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    paths.push_back(*newPath);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                paths[currentPathIndex].checkedNodes[currentNodeIndex] = <span class="keyword">true</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt; (int)currentNode-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">arcs</a>[0].children.size(); i++)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    paths[currentPathIndex].<a class="code" href="../../db/dc7/classPath.xhtml#a7f68b656205f2fb7a375509c81a8d571">addNode</a>(currentNode-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">arcs</a>[0].children[i]);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;}</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#ad27f163e8b9ca4aeba1353ef1783d95a">  247</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="../../db/dbf/classAOgraph.xhtml#ad27f163e8b9ca4aeba1353ef1783d95a">AOgraph::findOptimalPath</a>()</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// raise an error if there are no paths</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">if</span> (paths.size() == 0)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;[ERROR] There are no paths navigating the graph. &quot;</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            &lt;&lt;<span class="stringliteral">&quot;Did you run generatePaths()?&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    </div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordtype">int</span> index = 0;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordtype">int</span> cost = paths[0].pCost;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt; (int)paths.size(); i++)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="comment">// raise an error if there are not-complete paths</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">if</span> (paths[i].<a class="code" href="../../db/dc7/classPath.xhtml#a536e01bc729559a9a53eb9c47ec2e684">pComplete</a> == <span class="keyword">false</span>)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            cout&lt;&lt;<span class="stringliteral">&quot;[ERROR] The paths navigating the graph are not complete. &quot;</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                &lt;&lt;<span class="stringliteral">&quot;Did you run generatePaths()?&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        </div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">if</span> (paths[i].<a class="code" href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">pCost</a> &lt; cost)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            cost = paths[i].pCost;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            index = i;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;The optimal path is: &quot;</span> &lt;&lt;index &lt;&lt;endl;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    paths[index].printPathInfo();</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    </div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">return</span> index;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#a87dafa2fe301e4f95a1ec66c6d7ba21a">  282</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dbf/classAOgraph.xhtml#a87dafa2fe301e4f95a1ec66c6d7ba21a">AOgraph::setupGraph</a>()</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;{</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// update the feasibility status of the nodes in the graph</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    updateNodeFeasibility();</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    printGraphInfo();</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    </div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="comment">// generate all paths navigating the graph</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    generatePaths();</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// set the &quot;checked&quot; property of the nodes in the paths to false</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// NOTE: during execution, checked is used to mark the solved nodes</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; (int)paths.size(); i++)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; (int)paths[i].<a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>.size(); j++)</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            paths[i].<a class="code" href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">checkedNodes</a>[j] = <span class="keyword">false</span>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            </div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="comment">// identify the first suggestion to make</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    suggestNext();</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;}</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#ac5058c9153932169e618bb43e612dc35">  302</a></span>&#160;<a class="code" href="../../db/dbf/classAOgraph.xhtml#ac5058c9153932169e618bb43e612dc35">AOgraph::AOgraph</a>(<span class="keywordtype">string</span> name)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;{</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    gName = name;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    head = NULL;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    </div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="comment">//DEBUG:printGraphInfo();</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#ae4047aad30065aaf5ebdb04b5ee4565e">  312</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dbf/classAOgraph.xhtml#ae4047aad30065aaf5ebdb04b5ee4565e">AOgraph::loadFromFile</a>(<span class="keywordtype">string</span> fileName)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;{</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="comment">// raise an error if the graph is not empty</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">if</span> (graph.size() != 0)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;[ERROR] The graph is not empty.&quot;</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            &lt;&lt;<span class="stringliteral">&quot;Do you really want to overwrite the current graph?&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }            </div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    </div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    ifstream graphFile(fileName.c_str());</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    cout &lt;&lt;<span class="stringliteral">&quot;Loading graph description from file: &quot;</span> &lt;&lt;fileName &lt;&lt;endl;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    </div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">while</span> (!graphFile.eof())</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="comment">// the first line contains:</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="comment">// 1. the name of the graph</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="comment">// 2. the number N=numNodes of nodes</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="comment">// 3. the name of the head node (corresponding to the final assembly)</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordtype">string</span> name;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keywordtype">int</span> numNodes;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordtype">string</span> headName;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        </div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        graphFile &gt;&gt;name &gt;&gt;numNodes &gt;&gt;headName;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keywordflow">if</span> (!graphFile)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        gName = name;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        </div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="comment">// the next N lines contain the name and cost of all the nodes in the graph</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordtype">string</span> nameNode;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="keywordtype">int</span> cost;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; numNodes; i++)</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        {            </div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            graphFile &gt;&gt;nameNode &gt;&gt; cost;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keywordflow">if</span> (!graphFile)</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <a class="code" href="../../db/dc7/classPath.xhtml#a7f68b656205f2fb7a375509c81a8d571">addNode</a>(nameNode, cost);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        </div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="comment">// the next ?? lines contain the descriptions of the hyperarcs in the graph</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">while</span> (!graphFile.eof())</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a>* father;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="keywordtype">string</span> nameFather;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keywordtype">int</span> numChildren;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            vector&lt;AOnode*&gt; childNodes;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            </div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            graphFile &gt;&gt;numChildren &gt;&gt;nameFather;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordflow">if</span> (!graphFile)</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            father = findByName(nameFather);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            <span class="comment">//DEBUG:cout&lt;&lt;&quot;nameFather = &quot; &lt;&lt;nameFather &lt;&lt;endl;</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            </div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <span class="comment">// the next numChildren lines contain the names of the child nodes</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; numChildren; i++)</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            {</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                <a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a>* temp;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                <span class="keywordtype">string</span> nameChild;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                graphFile &gt;&gt;nameChild;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                <span class="keywordflow">if</span> (!graphFile)</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                temp = findByName(nameChild);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                childNodes.push_back(temp);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            father-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#abf615627731e4f03d0fed5294da24288">addArc</a>(childNodes);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        }</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="comment">// identify the head node in the graph</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        head = findByName(headName);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    graphFile.close();</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    </div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="comment">// set up the graph (nodes feasibility, paths costs)</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    setupGraph();</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;}</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#a520284be02c834241d32d9669598fba1">  388</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dbf/classAOgraph.xhtml#a520284be02c834241d32d9669598fba1">AOgraph::printGraphInfo</a>()</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;{</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    cout&lt;&lt;endl;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;Info of graph: &quot;</span> &lt;&lt;gName &lt;&lt;endl;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;Number of nodes: &quot;</span> &lt;&lt;graph.size() &lt;&lt;endl;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    cout&lt;&lt;<span class="stringliteral">&quot;Head node: &quot;</span> &lt;&lt;head-&gt;nName &lt;&lt;endl;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt; (int)graph.size(); i++)</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        graph[i].printNodeInfo();</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    cout&lt;&lt;endl;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#ac3de5a6fa4472fac8eafbd1ba637c8bd">  401</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dbf/classAOgraph.xhtml#ac3de5a6fa4472fac8eafbd1ba637c8bd">AOgraph::solveByName</a>(<span class="keywordtype">string</span> nameNode)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;{</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a>* solved = findByName(nameNode);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordtype">bool</span> result = solved-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#acf10113d7e2bdb01ca67e6bcf43fabf3">setSolved</a>();</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    updateNodeFeasibility();</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    printGraphInfo();</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    </div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="comment">// report that the graph has been solved if the solved node is the head node</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">if</span> (head-&gt;nSolved == <span class="keyword">true</span>)</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;[REPORT] The graph is solved (head node solved).&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    </div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="comment">// update the path information (cost)</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">if</span> (result == <span class="keyword">true</span>)</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; (int)paths.size(); i++)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            paths[i].<a class="code" href="../../db/dc7/classPath.xhtml#a8e9f65f8b87ece31c04381fd2d1bff73">updatePath</a>(nameNode);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    </div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">// identify the next suggestion to make</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    suggestNext();               </div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;}</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="../../db/dbf/classAOgraph.xhtml#a30c33ef703cae61d63a362d7328ecfd9">  422</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/dbf/classAOgraph.xhtml#a30c33ef703cae61d63a362d7328ecfd9">AOgraph::suggestNext</a>()</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;{</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">// issue a warning if the graph has been solved already</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordflow">if</span> (head-&gt;nSolved == <span class="keyword">true</span>)</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;[WARNING] The graph is solved. No suggestion possible.&quot;</span> &lt;&lt;endl;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    {</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <span class="keywordtype">int</span> optimalPathIndex = findOptimalPath();</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <a class="code" href="../../d6/d22/classAOnode.xhtml">AOnode</a>* suggestion = paths[optimalPathIndex].suggestNode();</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    </div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        cout&lt;&lt;<span class="stringliteral">&quot;ENDOR suggestion: &quot;</span> &lt;&lt;suggestion-&gt;<a class="code" href="../../d6/d22/classAOnode.xhtml#af28c48c20f4bc2cdc0d297d87c8bbe53">nName</a> &lt;&lt;endl;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    }</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;}</div><div class="ttc" id="classPath_xhtml_a620169f2195f0ebd14a3d3713ce1b06f"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#a620169f2195f0ebd14a3d3713ce1b06f">Path::pCost</a></div><div class="ttdeci">int pCost</div><div class="ttdoc">overall cost of all the nodes in the path </div><div class="ttdef"><b>Definition:</b> <a href="../../de/df2/aograph_8h_source.xhtml#l00023">aograph.h:23</a></div></div>
<div class="ttc" id="classPath_xhtml_a7f68b656205f2fb7a375509c81a8d571"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#a7f68b656205f2fb7a375509c81a8d571">Path::addNode</a></div><div class="ttdeci">void addNode(AOnode *node)</div><div class="ttdoc">add a node in the path </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00053">aograph.cpp:53</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_ac5058c9153932169e618bb43e612dc35"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#ac5058c9153932169e618bb43e612dc35">AOgraph::AOgraph</a></div><div class="ttdeci">AOgraph(string name)</div><div class="ttdoc">constructor </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00302">aograph.cpp:302</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_a87dafa2fe301e4f95a1ec66c6d7ba21a"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#a87dafa2fe301e4f95a1ec66c6d7ba21a">AOgraph::setupGraph</a></div><div class="ttdeci">void setupGraph()</div><div class="ttdoc">set up a graph </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00282">aograph.cpp:282</a></div></div>
<div class="ttc" id="classPath_xhtml_a885c9820459010ec106031910947bd80"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#a885c9820459010ec106031910947bd80">Path::printPathInfo</a></div><div class="ttdeci">void printPathInfo()</div><div class="ttdoc">display path information </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00034">aograph.cpp:34</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_ae4047aad30065aaf5ebdb04b5ee4565e"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#ae4047aad30065aaf5ebdb04b5ee4565e">AOgraph::loadFromFile</a></div><div class="ttdeci">void loadFromFile(string fileName)</div><div class="ttdoc">load the graph description from a file </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00312">aograph.cpp:312</a></div></div>
<div class="ttc" id="classAOnode_xhtml"><div class="ttname"><a href="../../d6/d22/classAOnode.xhtml">AOnode</a></div><div class="ttdoc">class &quot;AOnode&quot; for the generic node element of an AND-OR graph </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/d3a/aonode_8h_source.xhtml#l00040">aonode.h:40</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_a8437faadc195ca2835e41c384777d061"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#a8437faadc195ca2835e41c384777d061">AOgraph::findByName</a></div><div class="ttdeci">AOnode * findByName(string nameNode)</div><div class="ttdoc">find a node by name </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00125">aograph.cpp:125</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_a520284be02c834241d32d9669598fba1"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#a520284be02c834241d32d9669598fba1">AOgraph::printGraphInfo</a></div><div class="ttdeci">void printGraphInfo()</div><div class="ttdoc">display graph information </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00388">aograph.cpp:388</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_aa5be6664955f2ae86ffe5b560aaac379"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#aa5be6664955f2ae86ffe5b560aaac379">AOgraph::updateNodeFeasibility</a></div><div class="ttdeci">void updateNodeFeasibility()</div><div class="ttdoc">update the feasibility status of the nodes in the graph </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00146">aograph.cpp:146</a></div></div>
<div class="ttc" id="classPath_xhtml"><div class="ttname"><a href="../../db/dc7/classPath.xhtml">Path</a></div><div class="ttdoc">class &quot;Path&quot; for each unique path traversing the graph from the head to the leaves ...</div><div class="ttdef"><b>Definition:</b> <a href="../../de/df2/aograph_8h_source.xhtml#l00019">aograph.h:19</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_ac3de5a6fa4472fac8eafbd1ba637c8bd"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#ac3de5a6fa4472fac8eafbd1ba637c8bd">AOgraph::solveByName</a></div><div class="ttdeci">void solveByName(string nameNode)</div><div class="ttdoc">solve a node, finding it by name </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00401">aograph.cpp:401</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_a30c33ef703cae61d63a362d7328ecfd9"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#a30c33ef703cae61d63a362d7328ecfd9">AOgraph::suggestNext</a></div><div class="ttdeci">void suggestNext()</div><div class="ttdoc">suggest the node to solve </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00422">aograph.cpp:422</a></div></div>
<div class="ttc" id="classAOnode_xhtml_af28c48c20f4bc2cdc0d297d87c8bbe53"><div class="ttname"><a href="../../d6/d22/classAOnode.xhtml#af28c48c20f4bc2cdc0d297d87c8bbe53">AOnode::nName</a></div><div class="ttdeci">string nName</div><div class="ttdoc">name of the node </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/d3a/aonode_8h_source.xhtml#l00043">aonode.h:43</a></div></div>
<div class="ttc" id="classAOnode_xhtml_acf10113d7e2bdb01ca67e6bcf43fabf3"><div class="ttname"><a href="../../d6/d22/classAOnode.xhtml#acf10113d7e2bdb01ca67e6bcf43fabf3">AOnode::setSolved</a></div><div class="ttdeci">bool setSolved()</div><div class="ttdoc">set the node as solved </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/dc8/aonode_8cpp_source.xhtml#l00110">aonode.cpp:110</a></div></div>
<div class="ttc" id="classAOnode_xhtml_a8c739f761ad7badefb9fa1b6fa946cc2"><div class="ttname"><a href="../../d6/d22/classAOnode.xhtml#a8c739f761ad7badefb9fa1b6fa946cc2">AOnode::arcs</a></div><div class="ttdeci">vector&lt; HyperArc &gt; arcs</div><div class="ttdoc">set of hyperarcs connecting the node to child nodes </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/d3a/aonode_8h_source.xhtml#l00047">aonode.h:47</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_ad27f163e8b9ca4aeba1353ef1783d95a"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#ad27f163e8b9ca4aeba1353ef1783d95a">AOgraph::findOptimalPath</a></div><div class="ttdeci">int findOptimalPath()</div><div class="ttdoc">find the optimal path </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00247">aograph.cpp:247</a></div></div>
<div class="ttc" id="classAOnode_xhtml_a5c0cc92fac735168be8111fae12af690"><div class="ttname"><a href="../../d6/d22/classAOnode.xhtml#a5c0cc92fac735168be8111fae12af690">AOnode::nCost</a></div><div class="ttdeci">int nCost</div><div class="ttdoc">cost of the node </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/d3a/aonode_8h_source.xhtml#l00044">aonode.h:44</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_a032ca4643c87641235d59506090a53d1"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#a032ca4643c87641235d59506090a53d1">AOgraph::addNode</a></div><div class="ttdeci">void addNode(string nameNode, int cost)</div><div class="ttdoc">add a node in the graph </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00113">aograph.cpp:113</a></div></div>
<div class="ttc" id="classPath_xhtml_a8e9f65f8b87ece31c04381fd2d1bff73"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#a8e9f65f8b87ece31c04381fd2d1bff73">Path::updatePath</a></div><div class="ttdeci">void updatePath(string nameNode)</div><div class="ttdoc">update the path information (when a node is solved) </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00062">aograph.cpp:62</a></div></div>
<div class="ttc" id="classPath_xhtml_a4cfb1a7c9d144b895a87f116763cffce"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#a4cfb1a7c9d144b895a87f116763cffce">Path::pathNodes</a></div><div class="ttdeci">vector&lt; AOnode * &gt; pathNodes</div><div class="ttdoc">set of the nodes in the path </div><div class="ttdef"><b>Definition:</b> <a href="../../de/df2/aograph_8h_source.xhtml#l00025">aograph.h:25</a></div></div>
<div class="ttc" id="classAOnode_xhtml_abf615627731e4f03d0fed5294da24288"><div class="ttname"><a href="../../d6/d22/classAOnode.xhtml#abf615627731e4f03d0fed5294da24288">AOnode::addArc</a></div><div class="ttdeci">void addArc(vector&lt; AOnode * &gt; nodes)</div><div class="ttdoc">add an hyperarc to child nodes </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/dc8/aonode_8cpp_source.xhtml#l00046">aonode.cpp:46</a></div></div>
<div class="ttc" id="classPath_xhtml_af75708504af48a056f4cafb9e18e8395"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#af75708504af48a056f4cafb9e18e8395">Path::checkedNodes</a></div><div class="ttdeci">vector&lt; bool &gt; checkedNodes</div><div class="ttdoc">checked: the analysed nodes </div><div class="ttdef"><b>Definition:</b> <a href="../../de/df2/aograph_8h_source.xhtml#l00026">aograph.h:26</a></div></div>
<div class="ttc" id="classPath_xhtml_a536e01bc729559a9a53eb9c47ec2e684"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#a536e01bc729559a9a53eb9c47ec2e684">Path::pComplete</a></div><div class="ttdeci">bool pComplete</div><div class="ttdoc">complete: the path fully traverses the graph </div><div class="ttdef"><b>Definition:</b> <a href="../../de/df2/aograph_8h_source.xhtml#l00024">aograph.h:24</a></div></div>
<div class="ttc" id="classPath_xhtml_ac0e5a1573ee1096da427266c09dee678"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#ac0e5a1573ee1096da427266c09dee678">Path::suggestNode</a></div><div class="ttdeci">AOnode * suggestNode()</div><div class="ttdoc">find the feasible node to suggest </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00081">aograph.cpp:81</a></div></div>
<div class="ttc" id="classPath_xhtml_affd535b90eec827989d84bb8f9dbc477"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#affd535b90eec827989d84bb8f9dbc477">Path::pIndex</a></div><div class="ttdeci">int pIndex</div><div class="ttdoc">index of the path </div><div class="ttdef"><b>Definition:</b> <a href="../../de/df2/aograph_8h_source.xhtml#l00022">aograph.h:22</a></div></div>
<div class="ttc" id="classAOgraph_xhtml_a08f3218c510dcb87bfb9c2341ebfe574"><div class="ttname"><a href="../../db/dbf/classAOgraph.xhtml#a08f3218c510dcb87bfb9c2341ebfe574">AOgraph::generatePaths</a></div><div class="ttdeci">void generatePaths()</div><div class="ttdoc">generate all possible paths navigating the graph </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00153">aograph.cpp:153</a></div></div>
<div class="ttc" id="classPath_xhtml_afbe6763440ffa3fd8a3d7edda1a5b1f3"><div class="ttname"><a href="../../db/dc7/classPath.xhtml#afbe6763440ffa3fd8a3d7edda1a5b1f3">Path::Path</a></div><div class="ttdeci">Path(int cost, int index)</div><div class="ttdoc">constructor </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d6d/aograph_8cpp_source.xhtml#l00014">aograph.cpp:14</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Apr 25 2016 18:39:24 for endor by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
